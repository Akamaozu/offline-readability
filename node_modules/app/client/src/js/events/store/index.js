module.exports = function( noticeboard ){
  
  var store = require('store');

  if( !store.enabled ) return;

  noticeboard.notify('update-app-state', { local_storage: true }, 'store:bootstrap');
  
  if( !store.get('bookmarks-pages') ) store.set('bookmarks-pages', {});  
  if( !store.get('favorites-pages') ) store.set('favorites-pages', {});  
  if( !store.get('archives-pages') ) store.set('archives-pages', {});
  if( !store.get('articles') ) store.set('articles', {});  
  
  store.set('articles-bookmark-hash', {});

  noticeboard.once('bootstrap-completed', 'store:populate-articles-bookmark-hash', function(){

    var bookmarks_pages = store.get( 'bookmarks-pages' ),
        favorites_pages = store.get( 'favorites-pages' ),
        archives_pages = store.get( 'archives-pages' ),

        hash = {},
        sections_to_crawl = [ 
          { name: 'bookmarks', data: bookmarks_pages }, 
          { name: 'favorites', data: favorites_pages },
          { name: 'archives', data: archives_pages }
        ];

    sections_to_crawl.forEach( function( section ){

      for( var page in section.data ){

        if( !section.data.hasOwnProperty( page ) ) continue;

        section.data[ page ].bookmarks.forEach( function( bookmark, index ){

          if( hash[ bookmark.article.id ] ) return;

          hash[ bookmark.article.id ] = { type: section.name, page: page, index: index };
        });
      }
    });

    store.set( 'articles-bookmark-hash', hash );

    noticeboard.notify('articles-bookmark-hash-created', null, 'store:populate-articles-to-bookmarks-hash');
  });

  noticeboard.once('bootstrap-completed', 'store:get-api-token', function( msg ){

    var api_token = store.get('api-token');

    if( api_token ){

      noticeboard.notify( 'update-app-state', { api_token: api_token }, 'store:get-api-token' );
      noticeboard.notify( 'api-token-loaded', api_token, 'store:get-api-token' );
    }

    else noticeboard.notify('no-api-token-in-store', null, 'store:get-api-token');
  });

  noticeboard.watch('get-bookmarks-page', 'store:get-page', function( msg ){

    var request = msg.notice,
        pages = store.get( request.type + '-pages');

    if( !request.page ) request.page = 1;

    if( !pages || !pages[ request.page ] ) return;

    request.callback( pages[ request.page ] );
  });

  noticeboard.watch('bookmarks-page-downloaded', 'store:save-page', function( msg ){

    var data = msg.notice,
        page = data.page,
        type = data.type,
        content = data.content,
        current_pages = store.get( type + '-pages' );

    if( !current_pages[ page ] ){

      current_pages[ page ] = content;
      store.set( type + '-pages', current_pages );

      return noticeboard.notify('bookmarks-pages-updated', { type: type, page: page });
    }

    if( JSON.stringify( content ) === JSON.stringify( current_pages[ page ] ) ) return;

    current_pages[ page ] = content;
    store.set( type + '-pages', current_pages );

    return noticeboard.notify('bookmarks-pages-updated', { type: type, page: page });
  });

  noticeboard.watch('bookmarks-pages-updated', 'store:update-articles-to-bookmarks-hash', function( msg ){

    var page_type = msg.notice.type,
        page_number = msg.notice.page,
        pages = store.get( page_type + '-pages' ),
        page = pages[ page_number ],

        updated = false,

        articles_bookmark_hash = store.get('articles-bookmark-hash');

    if( !page ) return;

    page.bookmarks.forEach( function( bookmark, index ){

      var bookmark_id = bookmark.id,
          article_id = bookmark.article.id;

      if( !articles_bookmark_hash[ article_id ] ){

        articles_bookmark_hash[ article_id ] = { type: page_type, page: page_number, index: index };

        if( !updated ) updated = true;
      }

      else {
        
        var hash_entry = articles_bookmark_hash[ article_id ];

        if( hash_entry.type !== page_type || hash_entry.page !== page_number || hash_entry.index !== index ){

          articles_bookmark_hash[ article_id ] = { type: page_type, page: page_number, index: index };

          if( !updated ) updated = true;
        }
      }
    });

    if( !updated ) return;

    store.set( 'articles-bookmark-hash', articles_bookmark_hash );

    noticeboard.notify('articles-bookmark-hash-updated', null, 'store:update-articles-to-bookmarks-hash');
  });

  noticeboard.watch('get-article', 'store:get-article', function( msg ){

    var request = msg.notice,
        article_id = request.id,
        articles = store.get('articles');

    if( !article_id ) return;

    if( !articles || !articles[ article_id ] ) return;

    request.callback( articles[ article_id ] );
  });

  noticeboard.watch('article-downloaded', 'store:save-article', function( msg ){

    var data = msg.notice,
        article_id = data.id,
        content = data.content,
        articles = store.get('articles');

    if( !articles[ article_id ] ){

      articles[ article_id ] = content;
      store.set('articles', articles );

      return noticeboard.notify('articles-updated', { id: article_id, content: content });
    }

    if( JSON.stringify( content ) === JSON.stringify( articles[ article_id ] ) ) return;

    articles[ article_id ] = content;
    store.set('articles', articles);

    return noticeboard.notify('articles-updated', { id: article_id, content: content });
  });

  noticeboard.watch('get-articles-bookmark-hash', 'store:get-articles-bookmark-hash', function( msg ){

    var callback = msg.notice.callback,
        hash = store.get('articles-bookmark-hash');

    callback( hash );
  });
}